#!/bin/bash
# For systems with GPT LVM RAID arrays, tries to reset everything on second disk

usage() { echo "Usage: $0 [-A][-h]"; echo -e "  where\t-A\tAllow \"Secondary\" disk to be loaded at start"; echo -e "  \t-h\tdisplay this help and exit"; }

ACCEPT_LOAD=0
VERBOSE=0
while getopts "Avh" arg; do
	case $arg in
		A)
			ACCEPT_LOAD=1
			;;
		v)
			VERBOSE=1
			;;
		h | *)
			usage
			exit 0
			;;
	esac
done

disk="/dev/sdb"
devname=$(basename $disk)
lockf=/tmp/.accept_load

# Now get the user to load the Secondary disk
if [ -b $disk ] && [ $ACCEPT_LOAD == 0 ] && ([ ! -O $lockf ] || [ "$(cat $lockf)" != "$(lsblk --nodeps -no serial $disk)" ]); then
	echo "ERROR:\"Secondary\" disk $disk must not be loaded before start of script"
	echo "(You may want to use the '-A' option to [A]llow if this is intentional)"
	exit 1
fi
if [ ! -b $disk ]; then
	while [ ! -b $disk ]; do
		echo  -n -e "\rWaiting for disk $disk to be loaded, use 'Control-C' to safely abort ... "
		sleep 1
	done
	echo  -n -e "\r                                                                              "
	echo  -n -e "\rWaiting for disk $disk to settle ... "
	udevadm settle
	sleep 2
	echo $(lsblk --nodeps -no serial $disk) > $lockf
	echo -e "done.\n"
fi

if grep "/boot/efi" /proc/mounts | grep -q "$disk"; then
	# Ensure the primary disk is mounted on /boot/efi (not the secondary)
	umount /boot/efi
	mount /dev/sda1 /boot/efi
fi

# Perform sanity checks on secondary disk now that it's available
if mdadm --detail /dev/md0 | grep -q $disk; then
	echo "ERROR: \"Secondary\" disk $disk is currently part of RAID /dev/md0!!"
	exit 1
fi
if grep -q ^$disk /proc/mounts; then
	echo "ERROR: Some part of \"Secondary\" disk $disk is mounted!!"
	exit 1
fi
if [ $(cat /sys/block/md0/size) -gt $(cat /sys/block/$devname/size) ]; then
	echo "ERROR: \"Secondary\" device $devname is too small to house RAID /dev/md0"
	exit 1
fi
if [ "$(cat /sys/block/$devname/removable)" != "0" ]; then
	echo "WARNING: \"Secondary\" disk $disk is removable:"
	echo -n " $disk: "$(lsblk --nodeps -no tran $disk | tr [:lower:] [:upper:])
	echo -n " "$(lsblk --nodeps -no type $disk)
	echo -n ", model" $(lsblk --nodeps -no model $disk)
	echo ", s/n "$(lsblk --nodeps -no serial $disk)
fi

if [ $VERBOSE -eq 0 ]; then
	echo -n "Are you sure you wish to blank \"Secondary\" disk $disk (y=yes, n=no)? "
	badans=true
	while [ "$badans" = "true" ]; do
		read ans
		case "$ans" in
		y|yes)	badans=false
			;;
		n|no)	echo -e "Aborting."
			exit 0
			;;
		*)	echo -e "Please answer with y=yes or n=no : \c"
		esac
	done
fi

for part in $(cd /dev/;ls $devname?* 2>/dev/null); do
	partnum=$(echo $part | sed -e "s/$devname//")
	[ $VERBOSE -ne 0 ] && sgdisk -i$partnum $disk | head -n 1
	raid=$(grep $part /proc/mdstat | cut -d' ' -f1)
	if [ "$raid" = "md0" ]; then 
		# Belt _and_ braces!
        	echo "ERROR: \"Secondary\" disk $disk is currently part of RAID /dev/md0!!"
		exit 1
	elif [ ! -z $raid ]; then
		if grep ^"$raid" /proc/mdstat | grep " sda" > /dev/null; then
        		echo -n "ERROR: \"Primary\" disk /dev/sda is in a common RAID array: "
			mdadm --detail --scan /dev/$raid
			exit 1
		fi
		# Part of a foreign RAID volume
		if [ $VERBOSE -ne 0 ]; then
			echo -n "Detected /dev/$part in \"foreign\" RAID array: "
			mdadm --detail /dev/$raid
			echo -n "Delete RAID contents (Control-C aborts)? "
			read $ans
		fi
		pvremove -ff -y /dev/$raid 2>/dev/null
		mdadm -S /dev/$raid
		mdadm --zero-superblock --force /dev/$part 2>/dev/null
	else
		# Standalone partition or part of a local RAID volume
		if [ $VERBOSE -ne 0 ] && [ ! -z "$(sgdisk -i$partnum $disk | grep 'BIOS boot')" ]; then
			echo "Detected BIOS boot partition: /dev/$part"
			echo -n "Wipe partition (Control-C aborts)? "
			read $ans
		elif [ $VERBOSE -ne 0 ] && [ ! -z "$(sgdisk -i$partnum $disk | grep 'EFI System')" ]; then
			echo "Detected EFI System partition: /dev/$part"
			echo -n "Wipe partition (Control-C aborts)? "
			read $ans
		elif [ $VERBOSE -ne 0 ] && [ ! -z "$(sgdisk -i$partnum $disk | grep 'Linux filesystem')" ]; then
			echo "Detected Linux filesystem partition: /dev/$part"
			tune2fs -l /dev/$part
			echo -n "Wipe partition (Control-C aborts)? "
			read $ans
		elif mdadm -b --examine /dev/$part 2>&1 | grep -q ARRAY ; then
			if [ $VERBOSE -ne 0 ]; then
				echo -n "Detected (unused) RAID component: "
				mdadm --examine /dev/$part
				echo -n "Delete RAID contents (Control-C aborts)? "
				read $ans
			fi
			mdadm --zero-superblock --force /dev/$part 2>/dev/null
		elif pvdisplay /dev/$part 2>/dev/null | grep -q "/dev/$part" ; then
			VG=$(pvs --noheadings -o vg_name /dev/$part | tr -d " ")
			LVS=$(pvs --noheadings -o lv_name /dev/$part | tr -d " " | sort -u)
			if [ $VERBOSE -ne 0 ]; then
				echo "Detected raw LVM physical volume:"
				pvdisplay /dev/$part
				echo -n "Which contains LV(s):"
				for lv in $LVS; do
					echo -n " $VG/$lv"
				done; echo
				echo -n "Delete LVM contents (Control-C aborts)? "
				read $ans
			fi
			for lv in $LVS; do
				lvremove -f $VG/$lv
			done
			vgreduce -f $VG /dev/$part
			pvremove -ff -y /dev/$part
		elif [ $VERBOSE -ne 0 ]; then
			echo "Detected unrecognised partition: /dev/$part"
			echo -n "Wipe partition (Control-C aborts)? "
			read $ans
		fi
	fi
	if [ $VERBOSE -ne 0 ]; then
		echo -n "Wiping partition /dev/$part ... "
		wipefs -a /dev/$part
		echo -e "done.\n"
	else
		wipefs -aq /dev/$part > /dev/null
	fi
done
if [ $VERBOSE -ne 0 ]; then
	echo -n "Erase partition table of disk $disk (Control-C aborts)? "
	read $ans
	if $(partprobe -ds $disk | grep -q msdos); then
		sfdisk --delete $disk
	else
		sgdisk -Z -o $disk
	fi
	wipefs -a $disk
else
	if $(partprobe -ds $disk | grep -q msdos); then
		sfdisk --delete $disk > /dev/null
	else
		sgdisk -Z -o $disk > /dev/null
	fi
	wipefs -aq $disk > /dev/null
fi
echo -e "\n\"Secondary\" disk $disk is now blank!"

exit 0
