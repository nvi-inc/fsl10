#!/bin/bash
#
# Copyright (c) 2020-2021 NVI, Inc.
#
# This file is part of FSL10 Linux distribution.
# (see http://github.com/nvi-inc/fsl10).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

set -e

usage() {
    cat << EOF

Usage: $0 [options]
This script refreshes '/usr2' on the Spare system.

Options:
 -f       Run in foreground
 -h       Help: this output
 -s       Suppress sending email
 -y       Yes: proceed without prompting for confirmation

This is a script to refresh the contents of the Spare system '/usr2' partition
if you have both Operational and Spare systems.

CAUTION: This script will automatically overwrite everything on the '/usr2'
         partition of the system it is run on.  Use it only on the Spare
         system.  It will stop any processes that are using the '/usr2'
         partition.  Rebooting afterwards is recommended.

This script must be executed by 'root' on the Spare system.  You must be
logged-in as 'root' or promote to 'root' using 'su' or 'sudo'/'root_account'
and NOT have your working directory on '/usr2'.  If you promoted with 'su' or
'sudo'/'root_account', that session may have its working directory on '/usr2'
unless the '-f' option is used to refresh in foreground.  Make sure all other
users are logged-out on both systems before using this script.

This script must be customized before it is used.  Directions for that are
embedded in the script.

For foreground refreshes, a progress meter with an ETA will be displayed if the
'pv' package is installed.

The script creates a log file of what happened during the refreshing operation
in /root/refresh_spare_usr2_logs directory. The log file name includes a
time-stamp of when the refresh was started.

An email is sent to 'root' with the log file contents when the script finishes.

The refresh is normally performed in the background.  When it is first
installed on a system, it is recommended to run it in the foreground with the
'-f' option to verify that it is working and get an idea how long the transfer
will take.  It usually only takes a few minutes for newly installed systems,
but that will gradually increase as '/usr2' on the Operational system
accumulates more data.  The actual transfer time will be shown on the screen in
foreground mode.  For either mode, it can also be found in the log file on
disk, which is typically emailed to 'root' as well, when the script finishes.
It is recommended to check and be aware of how how long the transfers have
taken, so you know about how long to expect the next transfer to take.

For background refreshes, verify that it has finished, either from the log file
or an email, before performing the finishing up steps: checking that 'mdstat'
does not show an active recovery and then rebooting.  Those finishing up steps
are also need for foreground mode, but it should be apparent from the screen
output when the refresh has finished.

The critical phase of operation of the script occurs between the printing of

    Starting critical phase. Executing "umount /usr2" ...

and

    ... completed "mount /usr2". The critical phase is finished.

If the script is interrupted or otherwise fails between these commands, it will
usually be necessary to take corrective action.  This normally consists of
re-executing (using copy-and-paste) the contents (everything from between the
double quotes, typically a long string) of the output line

    Executing "mke2fs -F -t ..."

That line is printed during the critical phase and can be found in the log
file, or if the '-f' option was used, may be visible on the screen.  If the
re-execution of 'mke2fs ...' fails because '/usr2' is mounted, you will need to
execute 'umount /usr2' before trying again.  After 'mke2fs' has been
re-executed successfully, execute 'mount /usr2' and try the script again.

EOF
}

# Check if pv (Pipe Viewer) is installed.
# Used for progress meter
if command -v pv &> /dev/null; then
    pv=$(which pv)
else
    pv=
fi

safe_pv() {
    if [[ -z "$pv" || -n "$background" ]]; then
        cat
    elif [[ ! "$size" =~ ^[1-9][0-9]*k$ ]]; then
# defensive
        $pv -W 2>/dev/tty
    else
        $pv -W -s "$size" 2>/dev/tty
    fi
}
background=1
proceed=
send_email=1
while getopts fhsy opt; do
    case $opt in
        f)
            background=
            ;;
        h)
            usage
            exit
            ;;
        s)
            send_email=
            ;;
        y)
            proceed=1
            ;;
        *)
            echo "Use '$0 -h' for help" >&2
            exit 1
            ;;
        :)
            echo "Use '$0 -h' for help" >&2
            exit 1
          ;;
    esac
done
shift $((OPTIND - 1))

special=special_arg_to_run_subscript
subscript=
if [[ "$1" = "$special" ]]; then
  subscript=1
fi

log=$2

if [[ -z "$subscript" ]]; then

    if [[ "$PWD/" =~ ^/usr2/ ]]; then
       echo "You are on '/usr2'. Try again, but 'cd /tmp' first."
       exit 1
    fi

    if ! [ ${EUID:-`id -u`} = 0 ]; then
       echo "You are not running with 'root' privileges!"
       exit 1
    fi

    if [[ -z "$proceed" ]]; then

        cat << EOF

    IMPORTANT: No one else should be logged into this system and no one should
               be logged into the Operational system.

EOF

        echo -e "Is it okay to proceed with refreshing '/usr2'? (y=yes, n=no) : \c"
        badans=true
        while [ "$badans" = "true" ]
        do
          read ans
          case "$ans" in
            y|yes) echo -e "\nO.K. Continuing with refresh ... "
                   badans=false
                   ;;
            n|no)  echo -e "\nO.K. Exiting."
                   exit
                   ;;
            *)     echo -e "\nPlease answer with y=yes or n=no : \c"
          esac
        done
    fi

#--------------------- Comment out the next two lines ---------------------
echo "This script must be customized before use.  See script for details."
exit 1
#--------------------------------------------------------------------------
#
# To customize this script (as 'root') on the Spare system:
#   1. MAKE ABSOLUTELY SURE YOU ARE WORKING ON THE SPARE SYSTEM.
#   2. Execute the commands:
#        cd /usr/local/sbin
#        cp -a /root/fsl10/RAID/refresh_spare_usr2 refresh_spare_usr2
#        chown root.root refresh_spare_usr2
#        chmod a+r,u+wx,go-wx refresh_spare_usr2
#   3. Edit '/usr/local/sbin/refresh_spare_usr2':
#        A. Comment out the two commands above (add leading '#'s).
#        B  Change the 'operational' in the 'remote_node=operational' line
#           below to the alias (preferred), FQDN, or IP address of your
#           Operational system  (There are additional instructions a little
#           after that line for more customizations for CIS hardened systems.)
#        C. Save the result.
#   4. The 'ssh' keys for 'root' on the Spare system should be copied to the
#      target account on the Operational system.  That system should also be
#      set to allow 'ssh' connections to that account from the Spare system.
#      If these two things cannot be done, the target account must allow
#      password login; in which case, background operation will not function.
#   5. Test it the first time just after the Spare system's disk has been
#      rotated.
#

# setup for log file
    dir=/root/refresh_spare_usr2_logs
    if [[ ! -d  "$dir" ]]; then
       mkdir "$dir"
    fi
    log="$dir/$(date +"%Y.%b.%d.%H.%M.%S")".log

    if [[ -n "$background" ]]; then
        cat << EOF

    Going to background, you should log out now or you may be logged out
    automatically.  Don't login again to either system until you expect the
    'refresh_spare_usr2' to have finished.

    After it has finished wait until 'mdstat' does not show an active recovery
    and then reboot.

EOF

        if [[ -n "$send_email" ]]; then
            cat << EOF
An email with the log file will be sent to 'root' when the script finishes.

EOF
        fi
        echo "Log file is $log"
        echo ""
        if [[ -z "$send_email" ]]; then
            nohup "$0" -s "$special" "$log" 1>>$log 2>&1 &
        else
            nohup "$0"    "$special" "$log" 1>>$log 2>&1 &
        fi
    else
        echo ""
        echo "Log file is $log"
        echo ""
        if [[ -z "$send_email" ]]; then
            options=-fs
        else
            options=-f
        fi
        "$0" "$options" "$special" "$log" 2>&1 |tee "$log"
    fi
    exit
fi

if [[ -z "$background" ]]; then
    echo "Refreshing Spare system disk '/usr2' partition in foreground ..."
else
    echo "Refreshing Spare system disk '/usr2' partition in background ..."
fi
date="$(date)"
echo "Started at $date"
if [ -z "`cat /proc/mounts | cut -d ' ' -f2 | grep /usr2`" ]; then
 echo "Can't proceed, '/usr2' is not mounted"
 exit 1
fi

device=$(grep " /usr2 " /proc/mounts | cut -d' ' -f1)
type=$(grep " /usr2 " /proc/mounts | cut -d' ' -f3)

if [[ -z "$background" ]]; then
    cat << EOF

    If you are logged out automatically, the 'refresh_spare_usr2' failed.  You
    were probably on '/usr2' before you switched to 'root'.  Try again, but
    'cd /tmp' before switching to 'root'.
EOF
fi

fuser -k -M -m /usr2 || :

echo ""
echo "Starting critical phase. Executing \"umount /usr2\" ..."
echo ""
umount /usr2
UUID=$(tune2fs -l $device | grep UUID | grep -o '[^ ]*$')
echo "Executing \"mke2fs -F -t $type -U $UUID $device\""
echo ""
mke2fs -F -t $type -U $UUID $device
mount /usr2
echo "... completed \"mount /usr2\".  The critical phase is finished."
echo ""

if [[ -z "$background" ]]; then
    if [[ -n "$pv" ]]; then
        cat >/dev/tty << EOF
    You may see two login messages from your Operational system.  If you are
    prompted for the 'root' or other password on that system (twice), you
    should provide it.  Then you will see a progress meter during the transfer.
EOF
    else
       cat >/dev/tty << EOF
    You may see a login message from your Operational system  If you are
    prompted for the 'root' or other password on that system, you should
    provide it.  Then there will be a long pause without any output unless
    there are errors.
EOF
    fi
    cat >/dev/tty << EOF

    When the transfer finishes, a summary of the transfer will be printed and
    you will see a line that starts: 'Done. ...', and get a prompt. Please
    follow the directions on the 'Done. ...' line.

EOF
    if [[ -n "$send_email" ]]; then
        cat >/dev/tty << EOF
    An email with the log file will be sent to 'root' when the script finishes.

EOF
    fi
fi

cat << EOF
    If there are errors, please report them at
    https://github.com/nvi-inc/fsl10/issues.

EOF

remote_user=root
# Use your Operational system name in place of 'operational' in the next line
remote_node=operational
remote_command='cd /usr2; tar --one-file-system -cf - .'

# Uncomment the next two lines for CIS hardened systems
#remote_user=spare
#remote_command='sudo send_usr2'

if [[ -n "$pv" && -z "$background" ]]; then
    size="$(ssh $remote_user@$remote_node df|grep /usr2|tr -s ' '|cut -d ' ' -f 3)"k
else
    size=
fi

time ssh "$remote_user@$remote_node" "$remote_command" | safe_pv | (cd /usr2; tar xpf - --totals)

cat << EOF

Done. Wait until 'mdstat' does not show an active recovery and then reboot.
EOF

if [[ -z "$background" ]]; then
    if [[ -n "$send_email" ]]; then
        cat "$log" | /usr/bin/mail -s "foreground refresh_spare_usr2 finished" root &
    fi
    echo "" >/dev/tty
elif [[ -n "$send_email" ]]; then
    cat "$log" | /usr/bin/mail -s "background refresh_spare_usr2 finished" root
fi
