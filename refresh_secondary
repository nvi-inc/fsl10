#!/bin/bash
# For systems with GPT LVM RAID arrays, copies the partition table onto
# the second disk (if missing), rebuilds the boot sector and adds the RAID
# partition back into the array as a spare to be rebuilt.

disk="/dev/sdb"
devname=$(basename $disk)
part1="$disk"1
part2="$disk"2

if [ ! -z "$(sgdisk -i1 /dev/sda | grep 'BIOS boot')" ] && [ ! -d /boot/efi ]; then
	boot="BIOS";
elif [ ! -z "$(sgdisk -i1 /dev/sda | grep 'EFI System')" ] && [ -d /boot/efi ]; then
	boot="EFI";
else
	echo "ERROR: Unrecognised boot scheme on \"Primary\" disk /dev/sda"
	exit 1
fi

echo "Checking that \"Secondary\" disk $disk is inserted & turned-on ... "
while [ ! -b $disk ]; do
	echo  -n -e "\rWaiting for disk $disk, use 'Control-C' to safely abort ..."
	sleep 1
done
echo -e "done.\n"

if grep "/boot/efi" /proc/mounts | grep -q "$disk"; then
	# Ensure the primary disk is mounted on /boot/efi (not the secondary)
	umount /boot/efi
	mount /dev/sda1 /boot/efi
fi

if mdadm --detail /dev/md0 | grep -q $disk; then
        echo "ERROR: \"Secondary\" disk $disk is already part of RAID /dev/md0!!"
	exit 1
fi

if grep -q " $devname" /proc/mdstat; then
	echo "ERROR: \"Foreign\" RAID(s) detected on \"Secondary\" disk $disk"
	echo "(You should use blank_secondary to reset the second disk first)"
	exit 1
fi

if grep -q ^$disk /proc/mounts; then
	echo "ERROR: Some part of \"Secondary\" disk $disk is mounted!!"
	exit 1
fi

if [ $(cat /sys/block/sda/size) -gt $(cat /sys/block/$devname/size) ]; then
	echo "WARNING: \"Secondary\" device $devname is smaller than sda"
	echo -n "Continue anyway (Control-C aborts)?"
	read $ans
fi

if ( [ $boot = "BIOS" ] && [ ! -z "$(sgdisk -i1 $disk | grep 'EFI System')" ] ) ||
   ( [ $boot = "EFI" ] && [ ! -z "$(sgdisk -i1 $disk | grep 'BIOS boot')" ] ); then
	echo "ERROR: boot scheme on \"Secondary\" disk $disk does not match \"Primary\" disk /dev/sda"
	echo "(You should use blank_secondary to reset the second disk)"
	exit 1
fi

if [ -b $part2 ] && ([ "$(mdadm --examine -Y /dev/sda2 | grep MD_UUID | cut -d'=' -f2)" != "$(mdadm --examine -Y $part2 | grep MD_UUID | cut -d'=' -f2)" ] ||
   [ $(mdadm --examine -Y /dev/sda2 | grep TIME | cut -d'=' -f2) -lt $(mdadm --examine -Y $part2 | grep TIME | cut -d'=' -f2) ] ||
   [ $(mdadm --examine -Y /dev/sda2 | grep EVENTS | cut -d'=' -f2) -lt $(mdadm --examine -Y $part2 | grep EVENTS | cut -d'=' -f2) ]);
then
	echo "ERROR: "Secondary\" disk $part2 does not contain an older copy of \"Primary\" disk /dev/sda2
	echo "(You should use blank_secondary to reset the second disk)"
	exit 1
fi


if [ "$(partprobe -s /dev/sda | cut -d' ' -f2-)" != "$(partprobe -s $disk | cut -d' ' -f2-)" ]; then
	if [ "$(partprobe -s $disk | cut -d' ' -f3-)" = "partitions" ]; then
		echo "Partitioning blank \"Secondary\" disk $disk..."
		sgdisk -R$disk /dev/sda
		sgdisk -G $disk
		partprobe $disk
		echo "done."
	else
		echo "ERROR: Partitioning of \"Secondary\" disk $disk does not match \"Primary\" disk /dev/sda"
		echo "(You should use blank_secondary to reset the second disk)"
		exit 1
	fi
fi

if [ $boot = "BIOS" ]; then
	echo "Installing GRUB bootloader in BIOS mode on \"Secondary\" disk $disk ... "
	grub-install $disk
	echo "done."
elif [ $boot = "EFI" ]; then
	echo "Installing GRUB bootloader in UEFI mode on \"Secondary\" disk $disk ... "
	# Note Debian 9 `grub-install` essentially ignores the second argument and
	# copies the grub EFI shim to /boot/efi, regardless what is mounted there.
	# Instead, we refresh the grub install on the primary, and unmount it to 
	# ensure it is consistent, then copy the whole ESP to the second disk. 
	grub-install $disk
	umount /boot/efi
	cp /dev/sda1 $part1
	# and remount the primary on /boot/efi again
	mount /dev/sda1 /boot/efi
	echo "done."
fi

echo "Adding \"Secondary\" disk $part2 to RAID array /dev/md0 ... "
echo "(This may safely be interrupted with 'Control-C' if you don't want to wait)"
mdadm --zero-superblock $part2
mdadm /dev/md0 --add-spare $part2
sleep 1

mdadm --detail /dev/md0; echo
if ! mdadm --detail /dev/md0 | grep -q ": clean, degraded, recovering $"; then
	echo "ERROR: RAID /dev/md0 failed to start rebuilding"
	exit 1
fi

while ! grep -q recovery /proc/mdstat; do 
	echo "Waiting for recovery ..."
	sleep 1;
done
#
while grep -q recovery /proc/mdstat; do 
	recovery=$(grep recovery /proc/mdstat | cut -c32-)
	echo -e -n "\r$recovery"
	sleep 1;
done
echo -e "\ndone."
