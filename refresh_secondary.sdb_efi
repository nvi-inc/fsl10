#!/bin/bash
set -e
# For UEFI systems with GPT LVM RAID arrays, copies the partition table
# onto the second disk and adds a disk into the array

echo "Checking that \"Secondary\" disk /dev/sdb is inserted & turned-on ... "
while [ ! -b /dev/sdb ]; do
        echo  -n -e "\rWaiting for disk /dev/sdb, use 'Control-C' to safely abort ..."
        sleep 1
done
echo "done."

if mdadm --detail /dev/md0 | grep -q /dev/sdb; then
        echo "ERROR: \"Secondary\" disk /dev/sdb is already active!!"
        exit 1
fi

if grep -q /dev/sdb /proc/mounts; then
        echo "ERROR: \"Secondary\" disk /dev/sdb is mounted!!"
        exit 1
fi

echo "Stopping any inactive RAID arrays using \"Secondary\" disk /dev/sdb ... "
for raid in $(grep inactive /proc/mdstat | grep ' sdb' | cut -d' ' -f1); do
	mdadm -S /dev/$raid;
done
echo "done."

if [ $(cat /sys/block/sda/size) -gt $(cat /sys/block/sdb/size) ]; then
        echo "ERROR: \"Secondary\" device sdb is smaller than sda"
        exit 1
fi

echo 'Partitioning "Secondary" disk...'
sgdisk -R/dev/sdb /dev/sda
sgdisk -G /dev/sdb
echo "done."

echo "Installing GRUB bootloader on \"Secondary\" disk /dev/sdb ... "
# Note Debian 9 `grub-install` essentially ignores the second argument and
# copies the grub EFI shim to /boot/efi, regardless what is mounted there.
# Instead, we refresh the grub install on the primary, and unmount it to 
# ensure it is consistend, then copy the whole partition to the second disk. 
grub-install /dev/sda 
umount /boot/efi
cp /dev/sda1 /dev/sdb1
echo "done."
mount /dev/sda1 /boot/efi

echo "Adding \"Secondary\" disk /dev/sdb to RAID array /dev/md0 ... "
echo "(This may safely be interrupted with 'Control-C' if you don't want to wait)"
mdadm /dev/md0 -a /dev/sdb2
while ! grep -q recovery /proc/mdstat; do 
	echo "Waiting for recovery ..."
	sleep 1;
done
#
while grep -q recovery /proc/mdstat; do 
    recovery=$(grep recovery /proc/mdstat | cut -c32-)
	echo -e -n "\r$recovery"
	sleep 1;
done
echo -e "\ndone."
